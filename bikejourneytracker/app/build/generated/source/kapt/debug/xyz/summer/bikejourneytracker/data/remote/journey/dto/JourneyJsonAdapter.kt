// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package xyz.summer.bikejourneytracker.`data`.remote.journey.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class JourneyJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Journey>() {
  private val options: JsonReader.Options = JsonReader.Options.of("departure", "return",
      "departureStationId", "departureStationName", "returnStationId", "returnStationName",
      "coveredDistance", "durationSec")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "departure")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "departureStationId")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Journey").append(')') }

  public override fun fromJson(reader: JsonReader): Journey {
    var departure: String? = null
    var returnTime: String? = null
    var departureStationId: Int? = null
    var departureStationName: String? = null
    var returnStationId: Int? = null
    var returnStationName: String? = null
    var coveredDistance: Int? = null
    var durationSec: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> departure = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("departure",
            "departure", reader)
        1 -> returnTime = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("returnTime",
            "return", reader)
        2 -> departureStationId = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("departureStationId", "departureStationId", reader)
        3 -> departureStationName = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("departureStationName", "departureStationName", reader)
        4 -> returnStationId = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("returnStationId", "returnStationId", reader)
        5 -> returnStationName = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("returnStationName", "returnStationName", reader)
        6 -> coveredDistance = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("coveredDistance", "coveredDistance", reader)
        7 -> durationSec = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("durationSec",
            "durationSec", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Journey(
        departure = departure ?: throw Util.missingProperty("departure", "departure", reader),
        returnTime = returnTime ?: throw Util.missingProperty("returnTime", "return", reader),
        departureStationId = departureStationId ?: throw Util.missingProperty("departureStationId",
            "departureStationId", reader),
        departureStationName = departureStationName ?:
            throw Util.missingProperty("departureStationName", "departureStationName", reader),
        returnStationId = returnStationId ?: throw Util.missingProperty("returnStationId",
            "returnStationId", reader),
        returnStationName = returnStationName ?: throw Util.missingProperty("returnStationName",
            "returnStationName", reader),
        coveredDistance = coveredDistance ?: throw Util.missingProperty("coveredDistance",
            "coveredDistance", reader),
        durationSec = durationSec ?: throw Util.missingProperty("durationSec", "durationSec",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Journey?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("departure")
    stringAdapter.toJson(writer, value_.departure)
    writer.name("return")
    stringAdapter.toJson(writer, value_.returnTime)
    writer.name("departureStationId")
    intAdapter.toJson(writer, value_.departureStationId)
    writer.name("departureStationName")
    stringAdapter.toJson(writer, value_.departureStationName)
    writer.name("returnStationId")
    intAdapter.toJson(writer, value_.returnStationId)
    writer.name("returnStationName")
    stringAdapter.toJson(writer, value_.returnStationName)
    writer.name("coveredDistance")
    intAdapter.toJson(writer, value_.coveredDistance)
    writer.name("durationSec")
    intAdapter.toJson(writer, value_.durationSec)
    writer.endObject()
  }
}
