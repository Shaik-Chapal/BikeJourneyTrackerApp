// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package xyz.summer.bikejourneytracker.`data`.station

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class StationJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Station>() {
  private val options: JsonReader.Options = JsonReader.Options.of("adress", "fid", "id",
      "kapasiteet", "kaupunki", "name", "namn", "nimi", "operaattor", "osoite", "stad", "x", "y")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "address")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "fid")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "x")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Station").append(')') }

  public override fun fromJson(reader: JsonReader): Station {
    var address: String? = null
    var fid: Int? = null
    var id: Int? = null
    var kapasiteet: Int? = null
    var kaupunki: String? = null
    var name: String? = null
    var namn: String? = null
    var nimi: String? = null
    var operaattor: String? = null
    var osoite: String? = null
    var stad: String? = null
    var x: Double? = null
    var y: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> address = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("address",
            "adress", reader)
        1 -> fid = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fid", "fid", reader)
        2 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        3 -> kapasiteet = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("kapasiteet",
            "kapasiteet", reader)
        4 -> kaupunki = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("kaupunki",
            "kaupunki", reader)
        5 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        6 -> namn = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("namn", "namn",
            reader)
        7 -> nimi = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("nimi", "nimi",
            reader)
        8 -> operaattor = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("operaattor",
            "operaattor", reader)
        9 -> osoite = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("osoite",
            "osoite", reader)
        10 -> stad = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("stad", "stad",
            reader)
        11 -> x = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("x", "x", reader)
        12 -> y = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("y", "y", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Station(
        address = address ?: throw Util.missingProperty("address", "adress", reader),
        fid = fid ?: throw Util.missingProperty("fid", "fid", reader),
        id = id ?: throw Util.missingProperty("id", "id", reader),
        kapasiteet = kapasiteet ?: throw Util.missingProperty("kapasiteet", "kapasiteet", reader),
        kaupunki = kaupunki ?: throw Util.missingProperty("kaupunki", "kaupunki", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        namn = namn ?: throw Util.missingProperty("namn", "namn", reader),
        nimi = nimi ?: throw Util.missingProperty("nimi", "nimi", reader),
        operaattor = operaattor ?: throw Util.missingProperty("operaattor", "operaattor", reader),
        osoite = osoite ?: throw Util.missingProperty("osoite", "osoite", reader),
        stad = stad ?: throw Util.missingProperty("stad", "stad", reader),
        x = x ?: throw Util.missingProperty("x", "x", reader),
        y = y ?: throw Util.missingProperty("y", "y", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Station?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("adress")
    stringAdapter.toJson(writer, value_.address)
    writer.name("fid")
    intAdapter.toJson(writer, value_.fid)
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("kapasiteet")
    intAdapter.toJson(writer, value_.kapasiteet)
    writer.name("kaupunki")
    stringAdapter.toJson(writer, value_.kaupunki)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("namn")
    stringAdapter.toJson(writer, value_.namn)
    writer.name("nimi")
    stringAdapter.toJson(writer, value_.nimi)
    writer.name("operaattor")
    stringAdapter.toJson(writer, value_.operaattor)
    writer.name("osoite")
    stringAdapter.toJson(writer, value_.osoite)
    writer.name("stad")
    stringAdapter.toJson(writer, value_.stad)
    writer.name("x")
    doubleAdapter.toJson(writer, value_.x)
    writer.name("y")
    doubleAdapter.toJson(writer, value_.y)
    writer.endObject()
  }
}
